{
  "/faq/": {
    "title": null,
    "subtitle": null,
    "body": ""
  },
  "/guides/intro/": {
    "title": "Introduction",
    "subtitle": null,
    "body": "Introduction These guides are organized by ATE platform, select the one you are interested in: Advantest V93K SMT7 Advantest V93K SMT8 Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt7/capture/": {
    "title": "Data Capture",
    "subtitle": "V93K SMT7",
    "body": "V93K SMT7 Data Capture Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt7/complete/": {
    "title": "Complete Tests",
    "subtitle": "V93K SMT7",
    "body": "V93K SMT7 Complete Tests The following complete test methods are provided to be directly called from a test suite: FunctionalTest DCMeasurement FrequencyMeasurement FunctionalTest This test will simply execute the pattern (label) defined by the test suite and will set pass/fail\ndepending on whether any mis-compares occur during the pattern execution. Arguments port (string) - (Optional, Default=””) The name of a port to execute the pattern on, will be\nrun on all pins (‘@’) if a port name is not supplied. testName (string) - (Optional) An explicit name to be used when logging the result of this\ntest, if not given the test suite name will be used forcePass (int) - (Optional, Default=0) When set to 1, the test will appear to always pass in the flow (produce\na green box), although the actual pass/fail result value will be logged to STDF. Normally this would be\nused for tests in the flow which are for data collection only. onPassFlag (string) - (Optional) The name of a test flow variable to be set if the test fails, e.g.\nsetting this to “MY_FLAG” would cause “@MY_FLAG” to be set to 1 in the event of the test passing.\nNo modification will be made to the variable if the test fails. onFailFlag (string) - (Optional) The name of a test flow variable to be set if the test fails, e.g.\nsetting this to “MY_FLAG” would cause “@MY_FLAG” to be set to 1 in the event of the test failing.\nNo modification will be made to the variable if the test passes. DCMeasurement This test will execute the pattern (label) defined by the test suite and then perform a voltage or\ncurrent measurement on the given pin. Options exist to configure the measurement and to select whether or not to run a shutdown pattern\nafter the measurement has been taken. Arguments pin (string) - ( Required ) The name of the pin to be measured. measure (string) - (Optional, Default=”VOLT”) Define whether to measure current or voltage (the default).\nSet to “CURR” to measure current. settlingTime (double) - (Optional, Default=0) Specify the time to wait after running the pattern before\ntaking the measurement, expressed in ms. forceValue (double) - (Optional, Default=0) The value to be forced on the pin during the measurement. iRange (double) - (Optional, Default=0) The current range to apply to the measurement in amps, it will\nbe calculated if not supplied (set to 0). badc (integer) - (Optional, Default=0) When set to 1 the measurement will be made using the board ADC\nrather than the PPMU (the default) applyShutdown (integer) - (Optional, Default=1) Set to 1 to execute the pattern (label) defined\nby the shutdownPattern argument after the measurement. shutdownPattern (string) - (Optional, Default=” _part1\") The name of the pattern (label) to be executed after taking\nthe measurement, this argument is required if `applyShutdown` is set to 1. By default it will look for a pattern\nnamed after the main pattern (label) with \"_part1\" appended. checkShutdown (integer) - (Optional, Default=1) When set to 1 the executing of the shutdown pattern\nwill be cared and the overall test will fail if any miscompares occur during the shutdown patten execution. port (string) - (Optional, Default=””) The name of a port to execute the pattern on, will be\nrun on all pins (‘@’) if a port name is not supplied. testName (string) - (Optional) An explicit name to be used when logging the result of this\ntest, if not given the test suite name will be used forcePass (int) - (Optional, Default=0) When set to 1, the test will appear to always pass in the flow (produce\na green box), although the actual pass/fail result value will be logged to STDF. Normally this would be\nused for tests in the flow which are for data collection only. onPassFlag (string) - (Optional) The name of a test flow variable to be set if the test fails, e.g.\nsetting this to “MY_FLAG” would cause “@MY_FLAG” to be set to 1 in the event of the test passing.\nNo modification will be made to the variable if the test fails. onFailFlag (string) - (Optional) The name of a test flow variable to be set if the test fails, e.g.\nsetting this to “MY_FLAG” would cause “@MY_FLAG” to be set to 1 in the event of the test failing.\nNo modification will be made to the variable if the test passes. FrequencyMeasurement Measure the frequency of a clock being output on the given pin. The pattern run by this test must setup the device to output the clock on the given pin\nand then run additional cycles where the data on the pin under test is digitally captured. The period of the capture cycles must be less than that of the clock being measured.\nThe effect of different settings of the capture period and the number of capture cycles should be\ncharacterized to determine the optimal settings to meet the application’s particular accuracy and\ntest time goals. pin (string) - ( Required ) The name of the pin to be measured. periodInNs (integer) - ( Required ) The period of the pattern’s capture vectors. samples (integer) - (Optional, Default=2000) The number of digital capture cycles made by the\npattern. periodBased (integer) - (Optional, Default=0) Set to 1 if the test limits are expressed as a\nperiod instead of a frequency (the default). port (string) - (Optional, Default=””) The name of a port to execute the pattern on, will be\nrun on all pins (‘@’) if a port name is not supplied. testName (string) - (Optional) An explicit name to be used when logging the result of this\ntest, if not given the test suite name will be used forcePass (int) - (Optional, Default=0) When set to 1, the test will appear to always pass in the flow (produce\na green box), although the actual pass/fail result value will be logged to STDF. Normally this would be\nused for tests in the flow which are for data collection only. onPassFlag (string) - (Optional) The name of a test flow variable to be set if the test fails, e.g.\nsetting this to “MY_FLAG” would cause “@MY_FLAG” to be set to 1 in the event of the test passing.\nNo modification will be made to the variable if the test fails. onFailFlag (string) - (Optional) The name of a test flow variable to be set if the test fails, e.g.\nsetting this to “MY_FLAG” would cause “@MY_FLAG” to be set to 1 in the event of the test failing.\nNo modification will be made to the variable if the test passes. Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt7/customizable/": {
    "title": "Customizable Tests",
    "subtitle": "V93K SMT7",
    "body": "V93K SMT7 Customizable Tests The Complete Tests provide a way to rapidly build a test program using\noff-the-shelf building blocks, however in many cases it will be desired to run a slightly customized version of these\ntests that is tweaked in some way to suit a particular application domain or for a few specific tests. This is where the customizable test template system should be used to get an easy way to create the\nfollowing types of test methods: Application-specific test primitives, for example a functional test method which calls an applications-specific\npower up function at the start, or which enforces the use of a particular test port. Test-specific variations on the primitive test methods, for example a functional test which will patch/overlay\nthe pattern with some data before running and/or capture and process some data at the end. The key goal of this system is to give test engineers the ability to implement common customization scenarios\nwhile writing an absolute minimum of application-specific code. Concept To create a custom test based on a template, create a test method class that inherits from one of the template classes defined in Origen::TestMethod , such as FunctionalTest : #include \"origen/test_method/functional_test.hpp\" class Functional : public Origen::TestMethod::FunctionalTest {\n\n} The test template will take care of many of the low-level details of how to create test methods in SMT7,\nsuch as having to remember to call RDI_INIT() and the use of ON_FIRST_INVOCATION and friends. To achieve this, the template takes control of the conventional SMT7 integration functions initialize() , run() and SMC_backgroundProcessing() , which means that you should not use these within your application code.\nInstead, use the functions that are described here and these will allow you to hook into the test’s\nlifecycle at various points during execution of the test. Note that you do not have do define all of these, only the ones that you want to use. Common Lifecycle Functions Here is a summary of the available lifecycle functions that should be supported by a majority of the\ntemplates (exceptions will be noted in the documentation for each template below): // This should be used to define any test methods parameters/arguments, it is a direct equivalent of the standard // initialize() function. function init() {\n} // This will be invoked once (applied to all sites) before executing the main body of the test. // It should be used to do any setup that you wish to apply to all sites. function preBody() {\n} // This will be invoked once for each active site and the current site number will be passed in. // It should be used to do any site-specific setup. function preBody( int site) {\n} // This is invoked once per site and can be thought of as roughly equivalent to the standard run() function. function body() { // By default it calls the test methods execute() method (more on this below), and this will internally apply // ON_FIRST_INVOCATION wrappers as required so you should not add these around the call to origen. origen.execute();\n} // This will be invoked once (applied to all sites) after executing the main body of the test. // It should be used to do any teardown that you wish to apply to all sites. // Note that this function is called synchronously, i.e. it will block execution of the test flow until it // has completed. function postBody() {\n} // This will be invoked once for each active site and the current site number will be passed in. // It should be used to do any site-specific teardown. // Note that this function is called synchronously, i.e. it will block execution of the test flow until it // has completed. function postBody( int site) {\n} // This will be invoked once for each active site and is intended to be the place where any processing of the // test result or captured data is performed. // If async is enabled then it will be called asynchronously and will not block execution of the test flow. // If async is not enabled then it will be called after postBody(int site), but is otherwise equivalent. function process( int site) {\n} Common Configuration and Execute API All test templates expose their core functionality via an API that is launched through an object called origen .\nThis is intended to provide a similar look and feel to the native SMT7 RDI API which is exposed through the rdi object. As mentioned above, the default body() function implementation will call origen.execute() which as the name\nsuggests will execute the test. Configuration can be done ahead of calling execute() , for example a majority of test templates support the concept\nof selecting a port to execute the pattern on, that can be done like this: origen.port( \" MY_PORT_NAME \" );\norigen.execute(); Or, if you prefer, these can be chained together similar to the RDI API: origen.port( \" MY_PORT_NAME \" ).execute(); To see what configuration options are available from a given test defined in Origen::TestMethod , such as Asynchronous Processing Asynchronous processing of test results is not supported yet, how to enable it will be described here when it\nis available. The plan is to provide a global switch that will enable/disable asynchronous processing and then an\nindividual test-level switch to allow the global setting to be overridden. In the meantime, do all processing that could be done asynchronously within the process(int site) function\ndescribed above. Your tests will then be ready to take advantage of the asynchronous feature when it becomes available. Available Templates There now follows some template-specific guidance, which includes some usage examples: FunctionalTest DCMeasurement FrequencyMeasurement Empty Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt7/helpers/": {
    "title": "Helper Functions",
    "subtitle": "V93K SMT7",
    "body": "V93K SMT7 Helper Functions Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt7/install/": {
    "title": "How to Install",
    "subtitle": "V93K SMT7",
    "body": "V93K SMT7 How to Install img { margin: 20px 0; } This document describes how to obtain the Origen V93K library\nand then install it within a test program. The guide is split into two parts: Part 1 - Describes how to obtain and add the library to your test program. Everyone must\ndo this part; for example when you have no plans to use it directly in your own code,\nbut you want to use another 3rd party library which depends on Origen. Part 2 - Describes the additional steps that are required if you want to use the Origen\nAPIs within your own code. Part 1 Get the Code The library is installed by placing a complete copy of the source code within your test program’s\ntop-level directory (the standard place to put test method libraries). See the FAQ for why this\napproach has been chosen. If you have access to the web and have Git installed, the easiest\nway is to check it out directly from Github: cd your/test/program\ngit clone https://github.com/Origen-SDK/origen_std_lib.git Then run these commands anytime you want to change version, substituting the version reference as\nappropriate (note that this will blow away any local edits that you may have made to the library): cd your/test/program/origen_std_lib\ngit pull\ngit reset --hard v0.12.0 Alternatively, you can always download a specific version of the library from our releases page . Create a preload Symlink A symlink then needs to be created to add the Origen library to the preload folder within the\ndevice directory, this ensures\nthat it is loaded before any 3rd party libraries that depend on it: mkdir -p your/device/testmethod/sh_lib\\-EL5\\-64bit/preload\npushd your/device/testmethod/sh_lib\\-EL5\\-64bit/preload \nln -s ../liborigen.so liborigen.so\npopd Add the Library to your Workspace With the source code in place, the last step is to make sure that it can be referenced through your\ntest program’s workspace. If it has not been automatically detected, then right-click within the Project Explorer pane\nand select “Import…“ : Then select “93000” -> “Test Method Project” on the next screen: Accept the defaults on the next screen, making sure that the “origen” checkbox is enabled: The Origen test methods will now be available from the test method selector once you build\nthe program, and any references to Origen from other libraries should now be valid. If you do experience any issues at this point, please comment below to get help. Part 2 If you want to use the Origen library within your own test method library for the first time,\nthen these additional steps are required. From the “Project Explorer” pane, right-click your library and select “Properties” . Then select the options shown below to add Origen to your project’s include path: It should end up like this, with a new entry for Origen that is relative to the top-level\nworkspace: To check if everything is hooked up correctly, you can add this to one of your source files\nand see if it builds: include \" origen.hpp \" Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt7/integration/": {
    "title": "Origen Integration",
    "subtitle": "V93K SMT7",
    "body": "V93K SMT7 Origen Integration Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt7/intro/": {
    "title": "Introduction",
    "subtitle": "V93K SMT7",
    "body": "V93K SMT7 Introduction The SmarTest 7 version of the library provides helpers, Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt7/patching/": {
    "title": "Patching Patterns (Overlay)",
    "subtitle": "V93K SMT7",
    "body": "V93K SMT7 Patching Patterns (Overlay) Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/v93ksmt8/intro/": {
    "title": "Introduction",
    "subtitle": "V93K SMT8",
    "body": "V93K SMT8 Introduction Sorry, Documentation Fail Unfortunately this guide has not been written yet, the SMT8 library is still in initial development. Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'https://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/": {
    "title": null,
    "subtitle": null,
    "body": ""
  },
  "/release_notes/": {
    "title": null,
    "subtitle": null,
    "body": ""
  }
}