{
  "/community/": {
    "title": null,
    "subtitle": null,
    "body": ""
  },
  "/guides/starting/company/": {
    "title": "Company Customization",
    "subtitle": "Getting Started with Origen",
    "body": "Getting Started with Origen Company Customization A mechanism is provided to customize the Origen installation to a particular\ncompany. The main customization options that this currently provides are: An internal gem server. This can be used to distribute private Origen plugins\nwithin your company. When this is defined any new Origen applications that are created\nwill automatically come configured to read from your server in addition to rubygems.org. Integration with your company’s email delivery system, allowing your applications to\neasily send transactional email to their users. Integration with your company’s LDAP user authentication system. This API may not be\ngeneric enough yet, but it is used within Freescale and we are keen to work\nwith anyone who wants to pilot it within another company. How The Configuration System Works Whenever an application is invoked, one of the first things that Origen will do is search\nfor a company configuration file called . origen_site_config.yml Starting from the application directory, the file system will be checked for the presence\nof any valid configuration files within the application’s root directory, and then in any of its parent\ndirectories until it hits the file system root directory. It will then check for a configuration file within the directory where Ruby is installed,\nand then again recursively through any of its parent directories. If multiple files are found then they will all be applied, with highest priority given\nto the files that are found first - i.e. those located closest to the current application. So for example, if everyone in your company uses a common Ruby installation, then you can put a config\nfile somewhere in Ruby’s directory and it will be globally applied. Alternatively, if all of your users have their workspaces underneath /proj or\nsimilar, then may be a good place to put it.\nThis also provides a mechanism for per-project or even per-application overrides by\nadding additional config files higher up the tree. /proj/origen_site_config.yml Creating the Configuration File To create a config file simple copy the default configuration from Origen core and edit it as required. The values present in this default file are the ones that will be applied by default in\nan installation where no custom configs are present. Testing the Configuration File To test if your configuration values are being applied, open a console within an\nOrigen application: origen i You can then query the current live values via the following API, where the method names\ncorrespond directly to the attribute names in the config file: .site_config.gem_server Origen # => nil Origen .site_config.gem_mange_bundler # => true Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'http://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/starting/core/": {
    "title": "Core concepts",
    "subtitle": "Getting Started with Origen",
    "body": "Getting Started with Origen Core concepts There are some core concepts and terminology that should be understood up front in order for\nthe rest of the documentation to make sense. Origen Application An ‘Origen Application’ is an engineering application of some sort that has been built using the Origen\nplatform. Origen Core ‘Origen Core’ refers to the Origen platform itself.\nAlthough different applications may be using different versions of Origen core at any one time,\nit does follow a single thread of development and the latest version should be able to support\nany Origen application. Origen core (or one of its plugins) should take care of all of the common tasks that are not application\nspecific. This means that an application developer should spend most of their time working\non things are unique to their particular application domain, and not worrying about how to open a file for\nwriting, or what the vector format for a given ATE is. APIs The term API stands for ‘Application Programming Interface’, which basically means a set of methods\nthat are exposed to the application to allow an engineer to programatically tell Origen what to do or build. Origen provides various APIs for different functions such as to describe the registers within a model,\nto generate pattern vectors, to build web pages, etc. Plugins The Origen platform provides a plugin system that allows 3rd parties to develop additional APIs to\nsupplement those provided by Origen core.\nThe Origen core team maintain a collection of important plugins which are considered extensions of\nOrigen core, but anyone in the community can create and share a plugin. Application owners can control what versions of what plugins are used in their application. Origen also has a mechanism for companies to maintain an internal plugin repository so that its plugin\nsystem can be used to internally distribute proprietary code such as test blocks for a given silicon\ntechnology. Ruby Ruby is the programming language that has been used to create Origen, all Origen applications are\nalso written in Ruby. Anatomy of an Origen Application An Origen application is comprised of the following main components: Models Models are the foundation of an Origen application and encapsulate all meta-data about the silicon\nobject that they represent.\nThis can include but is not limited to: registers and bits, pins, and specs. \nModels can also instantiate other models, thereby allowing a full hierarchical representation of the target\ndevice to be constructed. The models also track state (while generating a test pattern for example), with the register and pin\nobjects behaving much like their silicon counterparts. Controllers Controllers are a concept used in test engineering applications, where each model is assigned\na controller that will be responsible for defining APIs to perform pattern operations based on the\ngiven model. For example, the controller for a analog-to-digital converter (ATD) model might define a ‘convert’\nmethod. This method would define\nthe sequence of register transactions that are required to do an ATD conversion. A ‘method’ by the way, is simply a function that is associated with a given object in a object-oriented\nprogramming language. Drivers Drivers, is the term generally used to refer to objects that control a protocol (e.g. JTAG) or some\npiece of non-silicon hardware like a tester for example. There is no dedicated Driver class in Origen and these will usually be constructed from the same\nOrigen APIs as used for Models and Controllers. Indeed the drivers could well be composed of a model\nof the associated hardware and a controller for it. Target While your application could define many different models for different silicon products, the\nonly one that matters at any one time is the one that you are targeting - that is the one that the\ngiven output should be compatible with or represent. An application can have many targets where each one is responsible for instantiating a model (or models)\nthat represent a single runtime condition or context that Origen should apply when\ngenerating content. In test engineering applications, it is usual for the target to instantiate a single top-level\nmodel called , representing the device under test. $dut Generally the term ‘target’ is used to refer to the current combination of target + environment… Environment The environment can be thought of as a higher level target, which is used to define runtime setup that can\nbe used in conjunction with many different targets. In test engineering applications, it is usual to use the environment to instantiate the target\ntest platform, normally this is assigned to the global variable . $tester Templates Origen has two main ways of generating dynamic ASCII output, the first is via the use of templates.\nThis is the most flexible way of generating dynamic content - the application provides a template\nfile which has been marked up with where dynamic content should go, Origen will then process it\nwithin the context of the current target to generate a target specific version. Origen does not care about what the template represents and it could be anything from design IP, to\nweb pages, to tool configuration files. Sources The second way of generating content is via APIs. In this case the generated content comes from\ncalling Origen methods via Ruby code, rather than from compiling a pre-written template.\nFor example, when creating a test\npattern the act of writing a register can be expressed via an API - -\nwhich will then be translated into the necessary vector stream by Origen. $dut.myreg.write!(0x5) The files which co-ordinate the APIs to build a specific output are called source files. For test engineering applications, source files are used to describe patterns and test flows, though\nOrigen does also support a source-less approach to pattern generation based on the pattern name. Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'http://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/starting/installing/": {
    "title": "How to Install",
    "subtitle": "Getting Started with Origen",
    "body": "Getting Started with Origen How to Install Origen can be installed on Linux or Windows, this guide refers to the Linux installation. If running on windows is of interest then please see this guide instead: How to Install Origen on Windows Background Origen is distributed as a Ruby gem, which is the Ruby language’s package manager. Installation of Origen consists of the following steps: Install Pre-Requisites Install Ruby Install Origen (optional) Customize your installation Install Pre-Requisites To install Ruby, your system will need a C compiler and the Make utility. Installation of this\nwill vary depending on your particular Linux distribution, but for example on Ubuntu\nthe required build environment can be installed by running: sudo apt-get install build-essential It is also recommend to install a recent version (2.x) of Git, if you don’t know how to\ndo that, google for . “how to install Git on <your distribution>“ Install Ruby Origen requires a , you can install this or the latest version. minimum Ruby version of 2.1.0 If you are working from a personal Linux box (or VM), or if you want to install Ruby for\nyourself only, we recommend that you install it via and follow these rbenv . installation instructions This will install Ruby to your home directory and will not require you to have root access. If you are working from a corporate environment where a central Ruby installation will\nbe used by many users, we recommend that you follow the instructions on the . official Ruby installation guide Most likely building from source will be the most appropriate choice in this case, especially\nif dealing with an older Linux distribution, since the version available from your system’s\npackage manager will probably be quite old. If you have any particular problems installing Ruby, please so that we can build up a record of common problems and solutions. use this discussion thread Install Origen Once you have Ruby successfully installed, Origen can be installed very easily via: gem install origen You can then verify Origen availability by running origen -v at which point you should see something like this: Origen: 0.4.1 Congratulations, Origen is now installed! Note that the version of Origen that is installed to your Ruby installation does not need to\nbe kept up to date with the latest version of Origen. You can now consider your Ruby environment\nto be frozen for the foreseeable future. See the section on for details on\nwhy that is. Understanding Gems A Note on Nokogiri A common problem with the final step of installing Origen is to run into problems installing\na gem called Nokogiri (which is one of Origen’s dependencies). Generally the more recent your Linux distribution is, the less likely you are to have problems\nwith this. It is beyond the scope of this document to deal with likely causes and solutions, however if\nyou do run into problems google should yield plenty of hits of similar cases and hopefully\nwith guidelines on how to fix it. You can also report problems via this Origen forum thread on Nokogiri Installation Issues and we will do our best to provide help, or you can actually just comment below… Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'http://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/starting/installwin/": {
    "title": "How to Install (Windows)",
    "subtitle": "Getting Started with Origen",
    "body": "Getting Started with Origen How to Install (Windows) Sorry, Documentation Fail Unfortunately this guide has not been written yet, but it is an area that is on our road map. Please comment below to let us know that you were looking for it, this will help us to prioritize which\nsections to write next. If you need help on this item in the meantime, please ask a question in the . Origen forum Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'http://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/guides/starting/introduction/": {
    "title": "Introduction",
    "subtitle": "Getting Started with Origen",
    "body": "Getting Started with Origen Introduction Welcome to the Origen guides! The Origen platform is written in Ruby\nand following this documentation will take you from a complete beginner to an\nOrigen expert. This site is focussed specifically on the Origen API, but for background on Ruby the\ninternet is your friend.\nRuby is very popular for web development and as such it is extremely easy to Google\nfor solutions to any Ruby-related problems that you may come across, or to find\ntutorials from which to learn. The official Ruby website contains a quick tutorial on Ruby to get you started: Ruby in 20 Minutes Previous engineers who have learned Ruby have recommend the following resources: Learn Ruby at rubymonk.com Learn Ruby at codeacademy.com Ruby for Newbies Video Tutorials Ruby Koans If you want to use regular expressions in your code the following website is invaluable: Regular Expression Editor Comments /* * * CONFIGURATION VARIABLES * * */\n var disqus_shortname = 'origen-sdk';\n var disqus_title;\n var disqus_url = 'http://' + window.location.hostname + window.location.pathname;\n\n disqus_title = $(\"h1\").text();\n if (disqus_title.length == 0) {\n disqus_title = $(\"h2\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"h3\").text();\n }\n if (disqus_title.length == 0) {\n disqus_title = $(\"title\").text();\n } else {\n disqus_title = disqus_title + ' (' + $(\"title\").text() + ')';\n }\n\n /* * * DON'T EDIT BELOW THIS LINE * * */\n (function() {\n var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "/plugins/": {
    "title": null,
    "subtitle": null,
    "body": ""
  },
  "/release_notes/": {
    "title": null,
    "subtitle": null,
    "body": ""
  }
}